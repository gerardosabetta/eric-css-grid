{"version":3,"sources":["components/Vaccines.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ageRanges","vaccines","Table","styled","div","display","gridTemplateColumns","length","VaccineName","vaccineName","gridColumnStart","Dose","from","gridColumnEnd","to","gridRowStart","vaccineIndex","background","borderRadius","applications","vaccine","dosis","name","getAgeColumn","age","findIndex","ag","Vaccines","map","ageRange","application","vac","dose","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MAGMA,EAAY,CAAC,QAAS,SAAU,UAAW,UAAW,WACtDC,EAAW,CAAC,YAAa,OAAQ,SAEjCC,EAAQC,IAAOC,IAAI,CACvBC,QAAS,OACTC,oBAAoB,UAAD,OAAYN,EAAUO,OAAS,EAA/B,YAGfC,EAAcL,IAAOC,KAAI,cAAGK,YAAH,MAA2B,CACxDC,gBAAiB,MAGbC,EAAOR,IAAOC,KAAI,kBAAsC,CAC5DM,gBADsB,EAAGE,KAEzBC,cAFsB,EAASC,GAG/BC,aAHsB,EAAaC,aAInCC,WAAY,YACZC,aAAc,WAGVC,EAAe,CACnB,CACEC,QAAS,YACTC,MAAO,CACL,CAAEC,KAAM,QAASV,KAAM,SAAUE,GAAI,WACrC,CAAEQ,KAAM,SAAUV,KAAM,UAAWE,GAAI,aAG3C,CACEM,QAAS,QACTC,MAAO,CACL,CAAEC,KAAM,QAASV,KAAM,QAASE,GAAI,UACpC,CAAEQ,KAAM,SAAUV,KAAM,UAAWE,GAAI,cAQvCS,EAAe,SAACC,GAAD,OACnBxB,EAAUyB,WAAU,SAACC,GAAD,OAAQA,IAAOF,MAiCtBG,EA/BE,WACf,OACE,eAACzB,EAAD,WACE,0CAECF,EAAU4B,KAAI,SAACC,GAAD,OACb,8BAAMA,OAGP5B,EAAS2B,KAAI,SAACR,GAAD,OACZ,cAACZ,EAAD,UAAcY,OAGfD,EAAaS,KAAI,SAACE,GACjB,IApBeV,EAoBTJ,GApBSI,EAoBoBU,EAAYV,QAnBrDnB,EAASwB,WAAU,SAACM,GAAD,OAASA,IAAQX,KAmB4B,GAE1D,OAAOU,EAAYT,MAAMO,KAAI,SAACI,GAC5B,IAAMpB,EAAOW,EAAaS,EAAKpB,MAAQ,EACjCE,EAAKS,EAAaS,EAAKlB,IAAM,EAEnC,OACE,eAACH,EAAD,CAAMK,aAAcA,EAAcJ,KAAMA,EAAME,GAAIA,EAAlD,UACGgB,EAAYV,QADf,IACyBY,EAAKV,kBCxD3BW,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCOSC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c45f73af.chunk.js","sourcesContent":["import React from 'react';\nimport styled from '@emotion/styled';\n\nconst ageRanges = ['birth', '1month', '2months', '3months', '6months'];\nconst vaccines = ['hepatitis', 'sida', 'covid'];\n\nconst Table = styled.div({\n  display: 'grid',\n  gridTemplateColumns: `repeat(${ageRanges.length + 1}, 1fr)`\n});\n\nconst VaccineName = styled.div(({ vaccineName }: any) => ({\n  gridColumnStart: 1\n}));\n\nconst Dose = styled.div(({ from, to, vaccineIndex }: any) => ({\n  gridColumnStart: from,\n  gridColumnEnd: to,\n  gridRowStart: vaccineIndex,\n  background: 'lightblue',\n  borderRadius: '5rem'\n}));\n\nconst applications = [\n  {\n    vaccine: 'hepatitis',\n    dosis: [\n      { name: 'first', from: '1month', to: '2months' },\n      { name: 'second', from: '3months', to: '6months' }\n    ]\n  },\n  {\n    vaccine: 'covid',\n    dosis: [\n      { name: 'first', from: 'birth', to: '1month' },\n      { name: 'second', from: '3months', to: '3months' }\n    ]\n  }\n];\n\nconst getVaccineRow = (vaccine: string): number =>\n  vaccines.findIndex((vac) => vac === vaccine);\n\nconst getAgeColumn = (age: string): number =>\n  ageRanges.findIndex((ag) => ag === age);\n\nconst Vaccines = () => {\n  return (\n    <Table>\n      <div>vaccine</div>\n\n      {ageRanges.map((ageRange) => (\n        <div>{ageRange}</div>\n      ))}\n\n      {vaccines.map((vaccine) => (\n        <VaccineName>{vaccine}</VaccineName>\n      ))}\n\n      {applications.map((application) => {\n        const vaccineIndex = getVaccineRow(application.vaccine) + 2; // +2 because findIndex is 0 indexed and we also dont want to overlap the header\n\n        return application.dosis.map((dose) => {\n          const from = getAgeColumn(dose.from) + 2; // +2 because findIndex is 0 indexed and we dont want to overlap the vaccine name\n          const to = getAgeColumn(dose.to) + 3; // +3 because all of the above and we want this to end at the right track of the grid cell\n\n          return (\n            <Dose vaccineIndex={vaccineIndex} from={from} to={to}>\n              {application.vaccine} {dose.name}\n            </Dose>\n          );\n        });\n      })}\n    </Table>\n  );\n};\n\nexport default Vaccines;\n","import React from 'react';\nimport './App.css';\nimport Vaccines from './components/Vaccines';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Vaccines />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}